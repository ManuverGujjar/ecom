<?php

include_once ('db_connection.php');

$db_connection = new DBConnection('ecom'); 



/* 
Base Manager for managing operation related to whole table
like selecting records

Inspired by Django
*/
class Manager {

	/*
		Table name to know on which table this particular instance of
		Manager will make transactions.
	*/
	private $table_name;

	function __construct($table_name) {
		$this->table_name = $table_name;
	}

	/*
		select operation with liming and offset.
	*/
	public function get($start=0, $end=null) {
		$table_name = $this->table_name;

		$sql = null;
		if ($end == null) {
			$sql = "SELECT * FROM $table_name;";
		} else {
			$sql = "SELECT * FROM $table_name LIMIT $start $end";
		}
		
		global $db_connection;

		$rows = $db_connection->query($sql);
		return $rows;
	}


	public function get_by_id($id) {
		$table_name = $this->table_name;

		$sql = "SELECT * FROM $table_name WHERE id = $id;";
		
		global $db_connection;

		$rows = $db_connection->query($sql);
		return $rows->fetch_assoc();
	}

	public function get_by_name($name) {
		$table_name = $this->table_name;

		$sql = "SELECT * FROM $table_name WHERE name = '$name' LIMIT 1;";
		
		global $db_connection;

		$rows = $db_connection->query($sql);
		return $rows->fetch_assoc();
	}

	public function get_by_foregion_key($column_name, $id ,$start=0, $end=null) {
		$table_name = $this->table_name;

		$sql = null;
		if ($end == null) {
			$sql = "SELECT * FROM $table_name WHERE $column_name = $id";
		} else {
			$sql = "SELECT * FROM $table_name  WHERE $column_name = $id LIMIT $start, $end";
		}
		
		global $db_connection;

		$rows = $db_connection->query($sql);
		return $rows;
	}
	

}



/*
	This is the base class for all the model inspired by Django
	we cannot instanciate this. this class has all the basic common
	opertions that can be performed on a single record of database 
	table for table wide operation Manager class is used
*/
abstract class Model {

	public $row = null;
	public $id = null;
	protected $table_name = null;


	/*
		for formating numeric and character values for 
		MySQL database

		putting quotes around character values
	*/
	protected function formatted($val) {
		if (is_numeric($val)) return $val;
		return "'$val'";
	}


	/*
		Utility function for generating insert query of a
		particular table with given table attributes in 
		row associative array
	*/
	protected function get_insert_sql() {
		$table_name = $this->table_name;

		$sql = "INSERT INTO $table_name (";

		$first = true;
		foreach ($this->row as $key => $value) {
			if (!$first) $sql = $sql.",";
			$first = false;
			$sql = $sql."$key";
		}

		$sql = $sql.") VALUES (";
		$first = true;
		foreach ($this->row as $key => $value) {
			if (!$first) $sql = $sql.",";
			$first = false;
			$value = $this->formatted($value);
			$sql = $sql."$value";
		}

		$sql = $sql.")";

		return $sql;
	}

	/*
		Utility function for generating update query of a
		particular table with given table attributes in 
		row associative array
	*/
	protected function get_update_sql() {
		$table_name = $this->table_name;

		$sql = "UPDATE $table_name SET ";

		$first = true;
		foreach ($this->row as $key => $value) {
			if (!$first) $sql = $sql.",";
			$first = false;
			$value = $this->formatted($value);
			$sql = $sql."$key = $value";
		}

		$sql = $sql." WHERE id = $this->id";
		return $sql;
	}


	/*
		for saving current object into database
		if the current object is newly generated by the
		user than it is inserted with autoincrement id
		otherwise it is updated
	*/
	public function save() {
		$sql = null;
		if ($this->id == null) {
			$sql = $this::get_insert_sql();

		} else {
			$sql = $this->get_update_sql();
		}
		$db_connection = $GLOBALS['db_connection'];
		return $db_connection->exec($sql);
	}

	public function delete() {
		if ($this->id != null) {
			$sql = "DELETE FROM $this->table_name WHERE id = $this->id";
			global $db_connection;
			$this->id = null;
			return $db_connection->exec($sql);

		}
		return false;
	}

	


}




/*
	basic PHP class for manipulating that category table
*/
class Category extends Model {
	public $id = null;
	public $row = array('name' => null, 'description' => null);
	protected $table_name = 'category';
	public static $manager;

	public function __construct($row) {
		try {
			$this->id = $row['id'];
		} catch(Exception $e) {
			// pass
		}
		foreach ($this->row as $key => $value) {
			$this->row[$key] = $row[$key];
		}
	}

	public static function get($start=0, $end=null) {
		$rows = Category::$manager->get($start, $end);
		$all = array();
		foreach ($rows as $row) {
			array_push($all, new Category($row));
		}
		return $all;
	}

	public static function get_by_id($id) {
		$row = Category::$manager->get_by_id($id);
		return new Category($row);
	}

	public static function get_by_name($name) {
		$row = Category::$manager->get_by_name($name);
		return new Category($row);
	}
}

Category::$manager = new Manager('category');





class SubCategory extends Model {
	public $id = null;
	public $row = array('name' => null, 'description' => null, 'category_id' => null);
	protected $table_name = 'sub_category';
	public static $manager;


	public function __construct($row) {
		try {
			$this->id = $row['id'];
		} catch(Exception $e) {
			// pass
		}
		foreach ($this->row as $key => $value) {
			$this->row[$key] = $row[$key];
		}
	}

	public static function get($start=0, $end=null) {
		$rows = SubCategory::$manager->get($start, $end);
		$all = array();
		foreach ($rows as $row) {
			array_push($all, new SubCategory($row));
		}
		return $all;
	}

	public static function get_by_id($id) {
		$row = SubCategory::$manager->get_by_id($id);
		return new SubCategory($row);
	}

	public static function get_by_name($name) {
		$row = SubCategory::$manager->get_by_name($name);
		return new SubCategory($row);
	}

	public static function get_by_foregion_key($key_id, $start=0, $end=null) {
			$rows = SubCategory::$manager->get_by_foregion_key('category_id', $key_id, $start, $end);

			$all = array();
			foreach ($rows as $row) {
				array_push($all, new SubCategory($row));
			}
			return $all;
	}
}

SubCategory::$manager = new Manager('sub_category');



class Product extends Model {
	public $id = null;
	public $row = array('name' => null, 	
					'description' => null, 
					'quantity' => null, 
					'price' => null,
					'image_link' => null,
					'sub_category_id' => null);

	protected $table_name = 'product';
	public static $manager;



	public function __construct($row) {
		try {
			$this->id = $row['id'];
		} catch(Exception $e) {
			// pass
		}
		foreach ($this->row as $key => $value) {
			$this->row[$key] = $row[$key];
		}
	}

	public static function get($start=0, $end=null) {
		$rows = Product::$manager->get($start, $end);
		$all = array();
		foreach ($rows as $row) {
			array_push($all, new Product($row));
		}
		return $all;
	}

	public static function get_by_id($id) {
		$row = Product::$manager->get_by_id($id);
		return new Product($row);
	}

	public static function get_by_foregion_key($key_id, $start=0, $end=null) {
			$rows = Product::$manager->get_by_foregion_key('sub_category_id', $key_id, $start, $end);

			$all = array();
			foreach ($rows as $row) {
				array_push($all, new Product($row));
			}
			return $all;
	}
}

Product::$manager = new Manager('product');



?>